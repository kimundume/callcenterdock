version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: calldocker-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-key-here}
      - CORS_ORIGIN=http://localhost:3000,http://localhost:5173
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - SESSION_SECRET=${SESSION_SECRET:-your-session-secret-key}
      - COOKIE_SECRET=${COOKIE_SECRET:-your-cookie-secret-key}
    volumes:
      - ./backend/production.env:/app/production.env:ro
    networks:
      - calldocker-network
    depends_on:
      - mongodb

  # Frontend Dashboard Service
  frontend:
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
      target: production
    container_name: calldocker-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:5001/api
      - VITE_WIDGET_BASE_URL=http://localhost:3000
      - VITE_APP_NAME=CallDocker
    volumes:
      - ./frontend/dashboard/production.env:/app/production.env:ro
    networks:
      - calldocker-network
    depends_on:
      - backend

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: calldocker-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=calldocker
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - calldocker-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: calldocker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - calldocker-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  calldocker-network:
    driver: bridge 